<?phpif (!defined("_BASE_DIR_")) exit();include_class('Sesso');include_model('Tesserato','Societa','Tipo');include_controller('FormTesserato');class ModificaTesseratoCtrl {		const SUBMIT_MOD = 'modifica';	const SUBMIT_ELM = 'elimina';		/**	 * @var FormTesserato	 */	private $form;	private $tes;	/**	 * 	 * @var integer[]	 */	private $settori;	private $tipi;	private $elem_dis = array(FormTesserato::NOME, FormTesserato::COGN, FormTesserato::SESSO, FormTesserato::DATA_N);	private $err = array();		/**	 * 	 * @param integer $idtess	 * @param callable $callback [opz]	 * @param boolean $completo [opz] true per permettere sempre la modifica completa	 */	public function __construct($idtess, $callback=NULL, $completo=false) {		$this->tes = new Tesserato($idtess);		$disabile = empty($_POST['disabile']) ? 0 : 1;		if(!$this->tes->esiste()) {			go_home();		}				$id_soc = $this->tes->getIDSocieta();		$soc = new Societa($id_soc);		$this->settori = $soc->getIDSettori();		$pa = $this->haPagamentiAttivi();				$pagati = array();		if (in_rinnovo()) {			include_model('Pagamento');			foreach ($this->settori as $idsett)				$pagati[$idsett] = false;			foreach (PagamentoUtil::get()->settoriRinnovati($id_soc) as $idsett)				$pagati[$idsett] = true;		} else {			foreach ($this->settori as $idsett)				$pagati[$idsett] = true;		}		foreach ($pagati as $idsett => $pag) {			$tipis = Tipo::getFromSettore($idsett);			if ($pag) {				$this->tipi[$idsett] = $tipis;			} else {				foreach ($tipis as $idtipo => $tipo) {					if ($this->tes->getQualificaTipo($idtipo) !== NULL)						$this->tipi[$idsett][$idtipo] = $tipo;				}			}		}				$f = new FormTesserato('modifica_tesserato', $this->tes, $completo || !$pa, $pagati);		$this->form = $f;		 		new FormElem_Submit('Salva', $f, self::SUBMIT_MOD);		new FormElem_Submit('Elimina', $f, self::SUBMIT_ELM);				if($f->isInviato())		{			if($f->getElem(self::SUBMIT_ELM)->isPremuto())			{				$tes = $this->tes;								foreach($tes->getQualifiche() as $idq=>$q)					$tes->rimuoviQualifica($q->getIdTipo());								if ($tes->salva()) {					if (is_callable($callback))						call_user_func($callback, $tes);				}			}			elseif($f->isValido())			{				if($f->getElem(self::SUBMIT_MOD)->isPremuto())				{					$tes = $f->getTesserato();					if ($tes->salva()) {                                                                                        $db_hr = (int) $tes->getHp();                                            if (  $db_hr != $disabile)                                            {                                                 $tes->updateCampoTesserato('hp', $disabile, $tes->getId(), $id_soc);                                            }						if (is_callable($callback))							call_user_func($callback, $tes);					}				}			}			else //inviato con errore			{				foreach ($this->form->getErrori() as $nome => $err) {					switch ($err) {						case FORMERR_OBBLIG:							$msg = 'Campo obbligatorio';							break;						case FORMERR_FORMAT:							$msg = 'Formato non valido';							break;						case FORMERR_DATA_MAX:							$msg = 'La data dev\'essere nel passato';							break;						case FORMERR_CODFIS_COERENZA:							$msg = 'Valore non coerente con il codice fiscale';							$this->err[FormTesserato::COD_FIS] = 'Valore non coerente con i dati inseriti';							break;						default:							$msg = "Errore $err";							break;					}					//TODO codice fiscale					$this->err[$nome] = $msg;				}			}		}	}				/**	 * @return Tesserato	 */	public function getTesserato() {		return $this->tes;	}		public function getForm() {		return $this->form;	}		public function haPagamentiAttivi() {		return Pagamento::haPagati($this->tes->getId());	}		public function getErrore($nome) {		if (isset($this->err[$nome]))			return $this->err[$nome];		else			return '';	}		public function getErroreQualifica($idtipo) {		$nome = FormTesserato::GRADO . FormElem::keyToString($idtipo);		return $this->getErrore($nome);	}		/**	 *	 * @return Tipo[]	 */	public function getTipi() {		return Tipo::getTipi();	}		/**	 * 	 * @return integer[]	 */	public function getSettori() {		return $this->settori;	}		/**	 * 	 * @param integer $idsett	 */	public function getNomeSettore($idsett) {		return Settore::fromId($idsett)->getNome();	}		/**	 * Restituisce true se un tesserato ha un tipo attivo	 * @param Tesserato $tes	 * @param integer $idtipo	 */	public function isTipoAttivo($tes, $idtipo) {		$qu = $tes->getQualifiche();		return isset($qu[$idtipo]);	}		/**	 * @param int $idsett	 * @return Tipo[]	 */	public function getTipiSett($idsett) {		if (isset($this->tipi[$idsett]))			return $this->tipi[$idsett];		else 			return array();	}	}